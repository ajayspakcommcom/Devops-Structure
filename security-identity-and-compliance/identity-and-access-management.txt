
AWS Identity and Access Management (IAM) – Key Pointers

    1. What is IAM?
        . A foundational AWS service that controls who can access what in AWS.
        . Provides authentication (who you are) and authorization (what you can do).
        . Free service (you pay only for underlying resources).

    2. Why Use It?
        . Protects AWS environments by enforcing least privilege.
        . Allows fine-grained control over access to services/resources.
        . Essential for compliance (PCI DSS, HIPAA, ISO, SOC 2, etc.).

    3. Core Components
        . Users → Individual identities with long-term credentials (not recommended for prod).
        . Groups → Collection of users with common permissions.
        . Roles → Temporary identities with defined permissions (best practice).
        . Policies → JSON documents defining permissions (Allow/Deny).
        . Access Keys → For programmatic access (should be rotated, avoid static use).
        . Federation → External IdPs (SAML, OIDC, AD, etc.) integrate for SSO.

    4. Security Features
        . MFA (Multi-Factor Authentication) → for all privileged accounts.
        . IAM Access Analyzer → detect overly broad permissions.
        . Credential Reports → audit all users/keys.
        . Service Control Policies (SCPs) → org-level restrictions (with AWS Organizations).
        . Resource-based Policies → attach directly to S3 buckets, KMS keys, etc.

    5. Cost Model
        . IAM is free.
        . You only pay for resources being used (EC2, S3, etc.).

    6. Industry Standards & Best Practices
    ✅. Use IAM Roles instead of Users (especially for apps, services).
    ✅. Enforce MFA for all human logins.
    ✅. Apply least privilege principle (grant only needed permissions).
    ✅. Rotate access keys regularly (or eliminate them → use roles).
    ✅. Use IAM Identity Center for multi-account/user management.
    ✅. Use CloudTrail to log all IAM activities.
    ✅. Regularly audit with IAM Access Analyzer.
    ✅. Use SCPs to restrict services/org-wide policies.

    7. Typical Corporate Use Cases
      . Enterprise Teams → Developers get temporary roles, not root or IAM users.
      . SaaS Providers → Secure cross-account access with IAM roles.
      . Finance/Healthcare → Compliance enforcement (least privilege, MFA).
      . Hybrid Cloud → Federated login with on-prem AD/Okta/Azure AD.
      . Automation → Services assume roles (EC2, Lambda) to access S3, DynamoDB, etc.

    8. Summary
        . AWS IAM = the foundation of AWS security.
            . Controls who can access AWS resources and how.
            . Best practices → roles > users, enforce MFA, least privilege, audit with Access Analyzer & CloudTrail, integrate with Identity Center.
        